import * as tf from '@tensorflow/tfjs'
import { strokeDb } from '../fire/store'
import model from './model'
import { processTrainingData } from '../dataTransforms'

// Issues with async await, so we're using promises for now
// const fetchData = async () => {
// 	const querySnapshot = await strokeDb.get()
// 	const strokeData = []
// 	querySnapshot.forEach(stroke => strokeData.push(stroke.data()))
// 	return strokeData
// }

const fakeDataForTest = [{shape: "circle", stroke: '[[[74,482],[74,482]],[[74,482],[74,483]],[[74,483],[74,484]],[[74,484],[74,487]],[[74,487],[74,492]],[[74,492],[74,499]],[[74,499],[74,505]],[[74,505],[74,511]],[[74,511],[74,518]],[[74,518],[74,521]],[[74,521],[74,522]],[[74,522],[75,524]],[[75,524],[77,526]],[[77,526],[79,529]],[[79,529],[82,533]],[[82,533],[86,536]],[[86,536],[89,539]],[[89,539],[93,541]],[[93,541],[96,543]],[[96,543],[102,545]],[[102,545],[107,546]],[[107,546],[114,547]],[[114,547],[119,548]],[[119,548],[125,548]],[[125,548],[128,548]],[[128,548],[130,548]],[[130,548],[131,548]],[[131,548],[133,547]],[[133,547],[136,545]],[[136,545],[139,541]],[[139,541],[143,537]],[[143,537],[148,530]],[[148,530],[151,525]],[[151,525],[154,521]],[[154,521],[155,517]],[[155,517],[156,515]],[[156,515],[157,513]],[[157,513],[157,510]],[[157,510],[158,508]],[[158,508],[158,505]],[[158,505],[158,502]],[[158,502],[158,499]],[[158,499],[158,496]],[[158,496],[158,492]],[[158,492],[157,488]],[[157,488],[155,483]],[[155,483],[153,480]],[[153,480],[152,476]],[[152,476],[150,472]],[[150,472],[148,470]],[[148,470],[146,468]],[[146,468],[144,466]],[[144,466],[141,464]],[[141,464],[138,463]],[[138,463],[136,462]],[[136,462],[132,461]],[[132,461],[128,461]],[[128,461],[125,461]],[[125,461],[121,460]],[[121,460],[118,460]],[[118,460],[115,460]],[[115,460],[113,460]],[[113,460],[111,460]],[[111,460],[108,460]],[[108,460],[106,460]],[[106,460],[103,460]],[[103,460],[100,461]],[[100,461],[99,462]],[[99,462],[98,462]],[[98,462],[96,463]],[[96,463],[96,464]],[[96,464],[94,464]],[[94,464],[92,465]],[[92,465],[90,467]],[[90,467],[89,467]],[[89,467],[88,468]],[[88,468],[87,469]],[[87,469],[87,469]],[[87,469],[86,470]],[[86,470],[86,470]],[[86,470],[86,471]],[[86,471],[86,471]],[[86,471],[85,471]],[[85,471],[85,472]],[[85,472],[85,472]],[[85,472],[84,474]],[[84,474],[83,476]],[[83,476],[82,477]],[[82,477],[80,479]],[[80,479],[80,480]],[[80,480],[79,480]],[[79,480],[79,481]],[[79,481],[79,481]],[[79,481],[79,481]],[[79,481],[79,481]],[[79,481],[78,481]],[[78,481],[78,482]],[[78,482],[78,482]],[[78,482],[78,482]],[[78,482],[77,482]],[[77,482],[77,482]],[[77,482],[77,482]],[[77,482],[77,482]],[[77,482],[77,482]],[[77,482],[77,483]],[[77,483],[77,483]],[[77,483],[77,483]],[[77,483],[77,483]],[[77,483],[77,484]],[[77,484],[77,484]],[[77,484],[77,484]],[[77,484],[77,484]],[[77,484],[77,484]],[[77,484],[77,484]],[[77,484],[77,483]]]'}, 
{shape: "square", stroke: '[[[149,573],[149,574]],[[149,574],[149,575]],[[149,575],[149,576]],[[149,576],[149,580]],[[149,580],[149,584]],[[149,584],[149,594]],[[149,594],[149,601]],[[149,601],[149,606]],[[149,606],[149,614]],[[149,614],[149,619]],[[149,619],[149,623]],[[149,623],[150,626]],[[150,626],[151,628]],[[151,628],[152,629]],[[152,629],[153,630]],[[153,630],[153,630]],[[153,630],[154,631]],[[154,631],[154,631]],[[154,631],[155,633]],[[155,633],[157,637]],[[157,637],[159,640]],[[159,640],[160,643]],[[160,643],[162,645]],[[162,645],[163,646]],[[163,646],[163,648]],[[163,648],[164,649]],[[164,649],[166,650]],[[166,650],[169,652]],[[169,652],[173,655]],[[173,655],[180,659]],[[180,659],[187,661]],[[187,661],[195,662]],[[195,662],[203,662]],[[203,662],[210,662]],[[210,662],[217,662]],[[217,662],[223,662]],[[223,662],[230,662]],[[230,662],[236,660]],[[236,660],[243,657]],[[243,657],[249,654]],[[249,654],[256,650]],[[256,650],[259,647]],[[259,647],[262,644]],[[262,644],[265,640]],[[265,640],[269,636]],[[269,636],[272,630]],[[272,630],[276,623]],[[276,623],[277,617]],[[277,617],[280,611]],[[280,611],[281,603]],[[281,603],[281,597]],[[281,597],[281,587]],[[281,587],[281,578]],[[281,578],[281,570]],[[281,570],[279,564]],[[279,564],[276,558]],[[276,558],[273,553]],[[273,553],[270,549]],[[270,549],[267,546]],[[267,546],[262,542]],[[262,542],[257,539]],[[257,539],[250,536]],[[250,536],[242,533]],[[242,533],[236,531]],[[236,531],[225,529]],[[225,529],[219,528]],[[219,528],[212,528]],[[212,528],[204,528]],[[204,528],[199,528]],[[199,528],[193,528]],[[193,528],[188,528]],[[188,528],[184,529]],[[184,529],[180,530]],[[180,530],[176,531]],[[176,531],[173,534]],[[173,534],[169,536]],[[169,536],[164,540]],[[164,540],[162,541]],[[162,541],[159,544]],[[159,544],[156,546]],[[156,546],[154,548]],[[154,548],[152,551]],[[152,551],[150,554]],[[150,554],[148,555]],[[148,555],[148,557]],[[148,557],[147,558]],[[147,558],[147,558]],[[147,558],[147,558]],[[147,558],[147,559]],[[147,559],[147,559]],[[147,559],[148,559]],[[148,559],[148,560]],[[148,560],[148,560]],[[148,560],[148,560]],[[148,560],[148,560]],[[148,560],[148,561]],[[148,561],[148,561]],[[148,561],[148,562]],[[148,562],[148,562]],[[148,562],[148,563]],[[148,563],[148,563]],[[148,563],[148,563]],[[148,563],[148,564]],[[148,564],[148,565]],[[148,565],[148,566]],[[148,566],[149,567]],[[149,567],[149,567]],[[149,567],[149,568]],[[149,568],[149,569]],[[149,569],[149,570]],[[149,570],[149,570]],[[149,570],[149,571]],[[149,571],[149,571]],[[149,571],[149,571]],[[149,571],[150,571]],[[150,571],[150,571]]]'}]

const testingDataRaw = [{shape: 'circle', stroke: '[[[199,658],[199,658]],[[199,658],[199,658]],[[199,658],[198,658]],[[198,658],[197,659]],[[197,659],[196,661]],[[196,661],[194,662]],[[194,662],[192,665]],[[192,665],[191,668]],[[191,668],[189,671]],[[189,671],[187,675]],[[187,675],[186,678]],[[186,678],[184,681]],[[184,681],[184,684]],[[184,684],[183,687]],[[183,687],[182,692]],[[182,692],[182,694]],[[182,694],[182,697]],[[182,697],[182,699]],[[182,699],[182,702]],[[182,702],[182,703]],[[182,703],[182,705]],[[182,705],[182,706]],[[182,706],[183,708]],[[183,708],[184,709]],[[184,709],[185,710]],[[185,710],[186,711]],[[186,711],[187,713]],[[187,713],[189,714]],[[189,714],[190,715]],[[190,715],[192,716]],[[192,716],[195,717]],[[195,717],[197,718]],[[197,718],[200,719]],[[200,719],[202,720]],[[202,720],[204,721]],[[204,721],[206,721]],[[206,721],[208,722]],[[208,722],[211,723]],[[211,723],[213,723]],[[213,723],[216,723]],[[216,723],[219,723]],[[219,723],[221,723]],[[221,723],[224,723]],[[224,723],[227,722]],[[227,722],[230,721]],[[230,721],[232,719]],[[232,719],[234,717]],[[234,717],[236,715]],[[236,715],[238,711]],[[238,711],[240,709]],[[240,709],[242,706]],[[242,706],[244,703]],[[244,703],[245,700]],[[245,700],[246,697]],[[246,697],[248,694]],[[248,694],[249,690]],[[249,690],[250,687]],[[250,687],[251,682]],[[251,682],[252,679]],[[252,679],[252,676]],[[252,676],[252,673]],[[252,673],[252,670]],[[252,670],[252,667]],[[252,667],[252,665]],[[252,665],[252,663]],[[252,663],[250,662]],[[250,662],[249,661]],[[249,661],[248,660]],[[248,660],[246,659]],[[246,659],[244,658]],[[244,658],[241,657]],[[241,657],[238,655]],[[238,655],[234,652]],[[234,652],[230,651]],[[230,651],[226,650]],[[226,650],[222,650]],[[222,650],[218,650]],[[218,650],[215,650]],[[215,650],[212,650]],[[212,650],[210,651]],[[210,651],[209,652]],[[209,652],[206,653]],[[206,653],[204,655]],[[204,655],[201,656]],[[201,656],[198,658]],[[198,658],[197,658]],[[197,658],[195,659]],[[195,659],[194,660]],[[194,660],[193,662]]]'}, {shape: 'square', stroke: '[[[66,632],[66,632]],[[66,632],[66,633]],[[66,633],[66,635]],[[66,635],[66,639]],[[66,639],[66,642]],[[66,642],[66,649]],[[66,649],[66,653]],[[66,653],[66,659]],[[66,659],[66,664]],[[66,664],[66,668]],[[66,668],[66,673]],[[66,673],[66,678]],[[66,678],[66,682]],[[66,682],[66,688]],[[66,688],[66,692]],[[66,692],[66,695]],[[66,695],[66,698]],[[66,698],[66,701]],[[66,701],[66,703]],[[66,703],[66,705]],[[66,705],[66,707]],[[66,707],[66,708]],[[66,708],[66,709]],[[66,709],[66,709]],[[66,709],[66,710]],[[66,710],[67,710]],[[67,710],[67,710]],[[67,710],[68,710]],[[68,710],[69,709]],[[69,709],[70,708]],[[70,708],[71,707]],[[71,707],[74,706]],[[74,706],[78,706]],[[78,706],[84,706]],[[84,706],[89,706]],[[89,706],[97,706]],[[97,706],[107,705]],[[107,705],[112,705]],[[112,705],[116,705]],[[116,705],[121,705]],[[121,705],[124,705]],[[124,705],[126,705]],[[126,705],[128,705]],[[128,705],[129,705]],[[129,705],[130,705]],[[130,705],[131,705]],[[131,705],[132,705]],[[132,705],[133,705]],[[133,705],[134,705]],[[134,705],[135,705]],[[135,705],[135,705]],[[135,705],[136,705]],[[136,705],[136,705]],[[136,705],[136,705]],[[136,705],[136,704]],[[136,704],[136,703]],[[136,703],[136,702]],[[136,702],[136,701]],[[136,701],[136,699]],[[136,699],[136,697]],[[136,697],[135,694]],[[135,694],[134,690]],[[134,690],[134,685]],[[134,685],[133,681]],[[133,681],[133,676]],[[133,676],[132,671]],[[132,671],[131,666]],[[131,666],[131,660]],[[131,660],[131,656]],[[131,656],[131,651]],[[131,651],[130,647]],[[130,647],[130,643]],[[130,643],[130,640]],[[130,640],[130,638]],[[130,638],[130,637]],[[130,637],[130,635]],[[130,635],[130,634]],[[130,634],[130,633]],[[130,633],[130,632]],[[130,632],[130,631]],[[130,631],[130,631]],[[130,631],[130,630]],[[130,630],[130,630]],[[130,630],[129,630]],[[129,630],[129,630]],[[129,630],[127,631]],[[127,631],[126,631]],[[126,631],[124,632]],[[124,632],[123,632]],[[123,632],[121,632]],[[121,632],[118,632]],[[118,632],[116,632]],[[116,632],[113,632]],[[113,632],[110,632]],[[110,632],[103,632]],[[103,632],[98,632]],[[98,632],[92,632]],[[92,632],[87,632]],[[87,632],[82,632]],[[82,632],[78,632]],[[78,632],[76,632]],[[76,632],[74,632]],[[74,632],[72,632]],[[72,632],[71,632]],[[71,632],[70,632]],[[70,632],[68,632]],[[68,632],[67,632]],[[67,632],[66,632]],[[66,632],[65,632]],[[65,632],[65,632]]]'}]

const realCircle = [{type:'circle', stroke: '[[[350,206],[350,205]],[[350,205],[350,204]],[[350,204],[349,202]],[[349,202],[349,201]],[[349,201],[347,199]],[[347,199],[345,198]],[[345,198],[341,195]],[[341,195],[328,188]],[[328,188],[324,186]],[[324,186],[317,183]],[[317,183],[312,182]],[[312,182],[309,181]],[[309,181],[293,180]],[[293,180],[286,180]],[[286,180],[282,181]],[[282,181],[277,182]],[[277,182],[275,183]],[[275,183],[266,191]],[[266,191],[265,193]],[[265,193],[262,198]],[[262,198],[259,204]],[[259,204],[257,211]],[[257,211],[254,223]],[[254,223],[254,226]],[[254,226],[254,233]],[[254,233],[255,243]],[[255,243],[257,255]],[[257,255],[261,268]],[[261,268],[263,274]],[[263,274],[272,286]],[[272,286],[280,294]],[[280,294],[292,298]],[[292,298],[297,298]],[[297,298],[315,297]],[[315,297],[319,296]],[[319,296],[325,292]],[[325,292],[333,286]],[[333,286],[341,277]],[[341,277],[346,271]],[[346,271],[347,269]],[[347,269],[352,261]],[[352,261],[354,255]],[[354,255],[355,250]],[[355,250],[355,249]],[[355,249],[356,245]],[[356,245],[356,243]],[[356,243],[356,240]],[[356,240],[356,231]],[[356,231],[356,230]],[[356,230],[356,228]],[[356,228],[356,225]],[[356,225],[356,224]],[[356,224],[355,221]],[[355,221],[354,219]],[[354,219],[353,216]],[[353,216],[353,215]],[[353,215],[352,211]],[[352,211],[350,209]],[[350,209],[350,208]],[[350,208],[349,207]],[[349,207],[348,205]],[[348,205],[347,205]],[[347,205],[346,204]],[[346,204],[346,203]],[[346,203],[345,203]]]'}]

const testingData = processTrainingData(realCircle).trainingDataPoints
const testingDataTEST = tf.tensor2d(testingData)

const runTraining = () => {
	strokeDb.get()
		.then(querySnapshot => {
			const strokeData = []
			querySnapshot.forEach(stroke => strokeData.push(stroke.data()))
			return strokeData
		})
		.then(strokeData => {
			return processTrainingData(strokeData)
		})
		.then(trainingObject => {
			const { trainingDataPoints, outputDataPoints } = trainingObject
			const trainingData = tf.tensor2d(trainingDataPoints)
			const outputData = tf.tensor2d(outputDataPoints)
			const startTime = Date.now()
			// console.log(testingData[0], 'SECOND', testingData[10])
			model.fit(trainingData, outputData, {epochs: 300})
				.then(history => {
						console.log(Date.now() - startTime)	
						model.predict(testingDataTEST).print()
				})
		})
}

export default runTraining

import * as tf from '@tensorflow/tfjs'
import { strokeDb } from '../fire/store'
import model from './model'
import { processTrainingData } from '../dataTransforms'

// Issues with async await, so we're using promises for now
// const fetchData = async () => {
// 	const querySnapshot = await strokeDb.get()
// 	const strokeData = []
// 	querySnapshot.forEach(stroke => strokeData.push(stroke.data()))
// 	return strokeData
// }

const realCircle = [{type:'circle', stroke: '[[[492,173],[492,173]],[[492,173],[492,173]],[[492,173],[491,173]],[[491,173],[490,175]],[[490,175],[488,177]],[[488,177],[486,179]],[[486,179],[484,182]],[[484,182],[482,185]],[[482,185],[480,188]],[[480,188],[477,192]],[[477,192],[476,194]],[[476,194],[474,198]],[[474,198],[472,202]],[[472,202],[470,206]],[[470,206],[469,209]],[[469,209],[468,213]],[[468,213],[467,217]],[[467,217],[466,220]],[[466,220],[465,223]],[[465,223],[464,226]],[[464,226],[464,230]],[[464,230],[464,233]],[[464,233],[463,237]],[[463,237],[463,242]],[[463,242],[463,244]],[[463,244],[463,247]],[[463,247],[463,248]],[[463,248],[463,250]],[[463,250],[463,253]],[[463,253],[463,254]],[[463,254],[463,256]],[[463,256],[464,257]],[[464,257],[465,259]],[[465,259],[465,261]],[[465,261],[467,263]],[[467,263],[468,265]],[[468,265],[469,267]],[[469,267],[471,270]],[[471,270],[472,272]],[[472,272],[474,274]],[[474,274],[475,275]],[[475,275],[477,277]],[[477,277],[478,279]],[[478,279],[480,281]],[[480,281],[482,283]],[[482,283],[483,284]],[[483,284],[486,287]],[[486,287],[488,288]],[[488,288],[490,289]],[[490,289],[492,290]],[[492,290],[496,292]],[[496,292],[498,293]],[[498,293],[502,295]],[[502,295],[506,296]],[[506,296],[509,298]],[[509,298],[513,299]],[[513,299],[517,299]],[[517,299],[520,300]],[[520,300],[525,301]],[[525,301],[529,301]],[[529,301],[534,301]],[[534,301],[536,301]],[[536,301],[539,301]],[[539,301],[542,301]],[[542,301],[545,301]],[[545,301],[547,300]],[[547,300],[550,299]],[[550,299],[553,298]],[[553,298],[557,296]],[[557,296],[560,294]],[[560,294],[565,291]],[[565,291],[568,289]],[[568,289],[571,287]],[[571,287],[573,285]],[[573,285],[576,284]],[[576,284],[578,281]],[[578,281],[580,280]],[[580,280],[581,278]],[[581,278],[583,276]],[[583,276],[584,274]],[[584,274],[586,272]],[[586,272],[588,269]],[[588,269],[590,265]],[[590,265],[591,262]],[[591,262],[593,260]],[[593,260],[594,257]],[[594,257],[595,255]],[[595,255],[596,252]],[[596,252],[597,249]],[[597,249],[597,246]],[[597,246],[598,244]],[[598,244],[598,241]],[[598,241],[598,237]],[[598,237],[598,232]],[[598,232],[598,226]],[[598,226],[598,222]],[[598,222],[598,218]],[[598,218],[598,213]],[[598,213],[598,209]],[[598,209],[597,206]],[[597,206],[597,204]],[[597,204],[596,202]],[[596,202],[595,200]],[[595,200],[594,198]],[[594,198],[593,196]],[[593,196],[591,193]],[[591,193],[590,192]],[[590,192],[589,191]],[[589,191],[588,189]],[[588,189],[586,188]],[[586,188],[585,187]],[[585,187],[584,186]],[[584,186],[583,184]],[[583,184],[581,183]],[[581,183],[579,182]],[[579,182],[577,181]],[[577,181],[574,179]],[[574,179],[572,178]],[[572,178],[570,177]],[[570,177],[568,176]],[[568,176],[566,175]],[[566,175],[564,175]],[[564,175],[562,174]],[[562,174],[560,173]],[[560,173],[558,172]],[[558,172],[556,172]],[[556,172],[555,171]],[[555,171],[554,171]],[[554,171],[551,171]],[[551,171],[549,170]],[[549,170],[548,170]],[[548,170],[546,170]],[[546,170],[544,169]],[[544,169],[543,169]],[[543,169],[541,169]],[[541,169],[540,168]],[[540,168],[538,168]],[[538,168],[536,168]],[[536,168],[533,168]],[[533,168],[531,167]],[[531,167],[527,167]],[[527,167],[524,167]],[[524,167],[522,167]],[[522,167],[519,167]],[[519,167],[517,167]],[[517,167],[516,167]],[[516,167],[514,167]],[[514,167],[512,167]],[[512,167],[511,167]],[[511,167],[509,167]],[[509,167],[508,167]],[[508,167],[507,167]],[[507,167],[506,167]],[[506,167],[505,167]],[[505,167],[504,167]],[[504,167],[503,167]],[[503,167],[502,168]],[[502,168],[501,168]],[[501,168],[501,169]],[[501,169],[500,169]],[[500,169],[500,169]],[[500,169],[500,169]],[[500,169],[499,169]],[[499,169],[499,170]],[[499,170],[498,170]],[[498,170],[497,171]],[[497,171],[496,171]],[[496,171],[496,172]],[[496,172],[495,172]],[[495,172],[494,173]],[[494,173],[494,173]],[[494,173],[494,174]],[[494,174],[493,174]],[[493,174],[493,174]],[[493,174],[493,174]],[[493,174],[493,174]],[[493,174],[493,174]],[[493,174],[493,174]],[[493,174],[493,174]],[[493,174],[494,172]]]'}]

const realSquare = [{type: 'square', stroke: '[[[205,123],[206,123]],[[206,123],[206,124]],[[206,124],[206,126]],[[206,126],[206,128]],[[206,128],[206,131]],[[206,131],[206,134]],[[206,134],[206,137]],[[206,137],[206,141]],[[206,141],[206,144]],[[206,144],[206,148]],[[206,148],[206,152]],[[206,152],[206,156]],[[206,156],[206,159]],[[206,159],[206,163]],[[206,163],[206,166]],[[206,166],[206,168]],[[206,168],[206,171]],[[206,171],[206,173]],[[206,173],[206,177]],[[206,177],[206,179]],[[206,179],[206,182]],[[206,182],[206,184]],[[206,184],[206,185]],[[206,185],[206,188]],[[206,188],[206,190]],[[206,190],[206,193]],[[206,193],[206,196]],[[206,196],[206,199]],[[206,199],[206,202]],[[206,202],[206,205]],[[206,205],[207,207]],[[207,207],[207,210]],[[207,210],[208,212]],[[208,212],[208,215]],[[208,215],[209,217]],[[209,217],[209,220]],[[209,220],[209,222]],[[209,222],[209,224]],[[209,224],[210,225]],[[210,225],[210,225]],[[210,225],[210,226]],[[210,226],[210,226]],[[210,226],[210,225]],[[210,225],[210,225]],[[210,225],[210,224]],[[210,224],[211,224]],[[211,224],[211,223]],[[211,223],[212,223]],[[212,223],[213,222]],[[213,222],[214,222]],[[214,222],[217,221]],[[217,221],[220,220]],[[220,220],[224,220]],[[224,220],[228,220]],[[228,220],[232,219]],[[232,219],[235,219]],[[235,219],[239,219]],[[239,219],[245,219]],[[245,219],[249,219]],[[249,219],[253,219]],[[253,219],[257,219]],[[257,219],[260,219]],[[260,219],[263,219]],[[263,219],[265,219]],[[265,219],[266,219]],[[266,219],[268,219]],[[268,219],[269,219]],[[269,219],[271,219]],[[271,219],[273,219]],[[273,219],[276,219]],[[276,219],[277,219]],[[277,219],[278,219]],[[278,219],[279,219]],[[279,219],[280,219]],[[280,219],[282,219]],[[282,219],[283,219]],[[283,219],[284,219]],[[284,219],[285,219]],[[285,219],[286,219]],[[286,219],[288,219]],[[288,219],[289,220]],[[289,220],[290,220]],[[290,220],[291,220]],[[291,220],[292,220]],[[292,220],[293,220]],[[293,220],[294,220]],[[294,220],[296,220]],[[296,220],[297,220]],[[297,220],[297,220]],[[297,220],[298,220]],[[298,220],[298,220]],[[298,220],[298,220]],[[298,220],[299,220]],[[299,220],[299,220]],[[299,220],[300,220]],[[300,220],[300,220]],[[300,220],[301,220]],[[301,220],[301,220]],[[301,220],[300,220]],[[300,220],[300,219]],[[300,219],[300,219]],[[300,219],[299,218]],[[299,218],[299,217]],[[299,217],[299,215]],[[299,215],[299,214]],[[299,214],[299,212]],[[299,212],[299,209]],[[299,209],[299,207]],[[299,207],[299,204]],[[299,204],[299,201]],[[299,201],[299,196]],[[299,196],[299,193]],[[299,193],[299,190]],[[299,190],[299,187]],[[299,187],[299,183]],[[299,183],[299,179]],[[299,179],[299,175]],[[299,175],[299,171]],[[299,171],[299,167]],[[299,167],[299,161]],[[299,161],[300,158]],[[300,158],[300,153]],[[300,153],[300,147]],[[300,147],[300,144]],[[300,144],[301,142]],[[301,142],[301,141]],[[301,141],[301,139]],[[301,139],[301,137]],[[301,137],[301,135]],[[301,135],[302,131]],[[302,131],[302,129]],[[302,129],[302,127]],[[302,127],[303,125]],[[303,125],[303,124]],[[303,124],[303,123]],[[303,123],[303,122]],[[303,122],[303,122]],[[303,122],[303,121]],[[303,121],[303,121]],[[303,121],[303,121]],[[303,121],[302,121]],[[302,121],[302,121]],[[302,121],[301,121]],[[301,121],[300,121]],[[300,121],[297,121]],[[297,121],[295,121]],[[295,121],[292,120]],[[292,120],[289,120]],[[289,120],[285,119]],[[285,119],[282,118]],[[282,118],[277,118]],[[277,118],[272,117]],[[272,117],[268,117]],[[268,117],[265,117]],[[265,117],[261,117]],[[261,117],[257,117]],[[257,117],[254,117]],[[254,117],[251,117]],[[251,117],[247,117]],[[247,117],[245,117]],[[245,117],[242,117]],[[242,117],[239,117]],[[239,117],[234,117]],[[234,117],[231,117]],[[231,117],[230,117]],[[230,117],[228,118]],[[228,118],[227,118]],[[227,118],[226,118]],[[226,118],[225,118]],[[225,118],[223,118]],[[223,118],[222,118]],[[222,118],[221,118]],[[221,118],[220,118]],[[220,118],[218,119]],[[218,119],[217,119]],[[217,119],[217,119]],[[217,119],[216,119]],[[216,119],[215,120]],[[215,120],[214,120]],[[214,120],[213,120]],[[213,120],[213,120]],[[213,120],[212,120]],[[212,120],[212,120]],[[212,120],[211,120]],[[211,120],[210,121]],[[210,121],[209,121]],[[209,121],[209,121]],[[209,121],[208,121]],[[208,121],[208,121]],[[208,121],[208,121]],[[208,121],[208,121]],[[208,121],[208,121]],[[208,121],[207,122]],[[207,122],[207,122]]]'}]

// const testingDataCircleTensor = tf.tensor2d(testingDataCircle)

// const testingDataSquareTensor = tf.tensor2d(testingDataSquare)

const runTraining = () => {
	const testingDataCircle = new Array(20).fill(1)
	console.log(testingDataCircle)
	const testingDataSquare = new Array(20).fill(0)
	console.log(testingDataSquare)
	const testingDataTensor = tf.tensor2d([testingDataCircle, testingDataSquare])

	strokeDb.get()
		.then(querySnapshot => {
			const strokeData = []
			const outputData = []
			// const circles = []
			// const squares = []
			// querySnapshot.forEach(stroke => {
			// 	let shape = stroke.data()
			// 	if(shape.shape === 'circle' && circles.length <= 150) {
			// 		circles.push(shape); 
			// 	}else if(shape.shape === 'square' && squares.length <= 150){
			// 		squares.push(shape);
			// 	}
			// })

			for(let i = 0; i < 150; i++){
				strokeData.push(new Array(20).fill(1))
				outputData.push([1,0])
				strokeData.push(new Array(20).fill(0))
				outputData.push([0,1])
			}
			return {strokeData,outputData}
		})
		.then(strokeData => {
			// return processTrainingData(strokeData)
			return {trainingDataPoints: strokeData.strokeData, outputDataPoints: strokeData.outputData}
		})
		.then(trainingObject => {
			console.log(trainingObject)
			const { trainingDataPoints, outputDataPoints } = trainingObject
			const trainingData = tf.tensor2d(trainingDataPoints)
			const outputData = tf.tensor2d(outputDataPoints)
			const startTime = Date.now()
			// console.log(testingData[0], 'SECOND', testingData[10])
			model.fit(trainingData, outputData, {epochs: 200})
				.then(history => {
					console.log(history)
					console.log(Date.now() - startTime)	
					model.predict(testingDataTensor).print()
				})
		})
}

export default runTraining

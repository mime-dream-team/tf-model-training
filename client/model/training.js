import * as tf from '@tensorflow/tfjs'
import model from './model'
import fetchRawStrokeData from '../fire/shapes'
import { processTrainingData } from '../dataTransforms'

const realCircle = [{type:'circle', stroke: [[[848,88],[848,88]],[[848,88],[846,88]],[[846,88],[845,88]],[[845,88],[842,88]],[[842,88],[841,88]],[[841,88],[840,89]],[[840,89],[834,92]],[[834,92],[831,95]],[[831,95],[828,98]],[[828,98],[824,100]],[[824,100],[822,103]],[[822,103],[818,107]],[[818,107],[817,108]],[[817,108],[814,112]],[[814,112],[813,113]],[[813,113],[811,117]],[[811,117],[809,121]],[[809,121],[807,127]],[[807,127],[805,132]],[[805,132],[803,138]],[[803,138],[801,144]],[[801,144],[800,149]],[[800,149],[799,155]],[[799,155],[799,161]],[[799,161],[799,167]],[[799,167],[799,173]],[[799,173],[799,183]],[[799,183],[799,189]],[[799,189],[800,194]],[[800,194],[806,207]],[[806,207],[807,210]],[[807,210],[808,211]],[[808,211],[812,218]],[[812,218],[816,221]],[[816,221],[817,222]],[[817,222],[819,223]],[[819,223],[822,225]],[[822,225],[828,228]],[[828,228],[835,232]],[[835,232],[841,236]],[[841,236],[843,236]],[[843,236],[849,239]],[[849,239],[851,239]],[[851,239],[855,240]],[[855,240],[863,240]],[[863,240],[870,240]],[[870,240],[875,240]],[[875,240],[881,240]],[[881,240],[887,240]],[[887,240],[895,239]],[[895,239],[902,237]],[[902,237],[907,236]],[[907,236],[911,235]],[[911,235],[915,233]],[[915,233],[917,232]],[[917,232],[919,230]],[[919,230],[922,228]],[[922,228],[924,225]],[[924,225],[927,222]],[[927,222],[931,217]],[[931,217],[935,212]],[[935,212],[937,208]],[[937,208],[940,204]],[[940,204],[942,200]],[[942,200],[945,196]],[[945,196],[947,192]],[[947,192],[948,188]],[[948,188],[950,184]],[[950,184],[951,180]],[[951,180],[952,174]],[[952,174],[953,168]],[[953,168],[954,164]],[[954,164],[955,158]],[[955,158],[955,152]],[[955,152],[955,148]],[[955,148],[955,144]],[[955,144],[955,139]],[[955,139],[954,134]],[[954,134],[954,129]],[[954,129],[952,125]],[[952,125],[950,121]],[[950,121],[948,117]],[[948,117],[945,115]],[[945,115],[942,112]],[[942,112],[939,109]],[[939,109],[936,106]],[[936,106],[933,104]],[[933,104],[929,102]],[[929,102],[926,100]],[[926,100],[922,97]],[[922,97],[919,95]],[[919,95],[914,93]],[[914,93],[909,91]],[[909,91],[904,90]],[[904,90],[900,88]],[[900,88],[896,87]],[[896,87],[893,86]],[[893,86],[885,85]],[[885,85],[882,85]],[[882,85],[876,85]],[[876,85],[873,84]],[[873,84],[869,84]],[[869,84],[866,84]],[[866,84],[863,84]],[[863,84],[860,84]],[[860,84],[858,84]],[[858,84],[857,84]],[[857,84],[855,84]],[[855,84],[854,85]],[[854,85],[852,86]],[[852,86],[850,87]],[[850,87],[849,87]],[[849,87],[847,87]],[[847,87],[847,88]],[[847,88],[846,88]],[[846,88],[846,88]],[[846,88],[846,88]],[[846,88],[846,89]],[[846,89],[846,90]]]}]

const realSquare = [{type: 'square', stroke: [[[253, 693], [253, 694]], [[253, 694], [253, 694]], [[253, 694], [253, 700]], [[253, 700], [253, 706]], [[253, 706], [253, 714]], [[253, 714], [253, 724]], [[253, 724], [253, 736]], [[253, 736], [253, 746]], [[253, 746], [253, 751]], [[253, 751], [253, 756]], [[253, 756], [253, 759]], [[253, 759], [253, 760]], [[253, 760], [253, 761]], [[253, 761], [253, 761]], [[253, 761], [254, 761]], [[254, 761], [254, 761]], [[254, 761], [255, 761]], [[255, 761], [256, 760]], [[256, 760], [256, 760]], [[256, 760], [258, 759]], [[258, 759], [260, 759]], [[260, 759], [264, 759]], [[264, 759], [270, 759]], [[270, 759], [277, 759]], [[277, 759], [286, 759]], [[286, 759], [294, 759]], [[294, 759], [302, 760]], [[302, 760], [307, 760]], [[307, 760], [312, 760]], [[312, 760], [315, 760]], [[315, 760], [319, 760]], [[319, 760], [321, 760]], [[321, 760], [323, 760]], [[323, 760], [325, 760]], [[325, 760], [327, 760]], [[327, 760], [328, 760]], [[328, 760], [330, 760]], [[330, 760], [331, 760]], [[331, 760], [332, 759]], [[332, 759], [332, 758]], [[332, 758], [333, 757]], [[333, 757], [333, 755]], [[333, 755], [333, 753]], [[333, 753], [333, 750]], [[333, 750], [333, 746]], [[333, 746], [333, 742]], [[333, 742], [333, 738]], [[333, 738], [332, 731]], [[332, 731], [332, 724]], [[332, 724], [332, 713]], [[332, 713], [332, 706]], [[332, 706], [332, 702]], [[332, 702], [332, 699]], [[332, 699], [332, 698]], [[332, 698], [332, 697]], [[332, 697], [332, 696]], [[332, 696], [332, 696]], [[332, 696], [332, 696]], [[332, 696], [332, 695]], [[332, 695], [332, 695]], [[332, 695], [331, 695]], [[331, 695], [330, 695]], [[330, 695], [327, 695]], [[327, 695], [325, 695]], [[325, 695], [323, 695]], [[323, 695], [320, 694]], [[320, 694], [315, 694]], [[315, 694], [309, 694]], [[309, 694], [303, 693]], [[303, 693], [296, 693]], [[296, 693], [289, 692]], [[289, 692], [282, 691]], [[282, 691], [272, 690]], [[272, 690], [267, 690]], [[267, 690], [261, 689]], [[261, 689], [256, 689]], [[256, 689], [253, 689]], [[253, 689], [250, 689]], [[250, 689], [248, 688]], [[248, 688], [248, 688]], [[248, 688], [248, 688]]]}]

const realLine = [{type: 'line', stroke: [[[456,100],[456,119]],[[456,119],[458,144]],[[458,144],[460,179]],[[460,179],[461,228]],[[461,228],[461,277]],[[461,277],[463,328]],[[463,328],[468,382]],[[468,382],[473,439]],[[473,439],[479,498]],[[479,498],[483,559]],[[483,559],[485,617]],[[485,617],[486,671]],[[486,671],[487,723]],[[487,723],[489,769]],[[489,769],[493,810]],[[493,810],[494,839]],[[494,839],[496,864]],[[496,864],[497,882]],[[497,882],[498,894]],[[498,894],[498,903]],[[498,903],[498,907]]]}]


const testingDataCircle = processTrainingData(realCircle).shapeTrainingDataPoints[0]
const testingDataSquare = processTrainingData(realSquare).shapeTrainingDataPoints[0]
const testingDataLine = processTrainingData(realLine).shapeTrainingDataPoints[0]
// const testingDataLine = processTrainingData(realLine).shapeTrainingDataPoints[0]


const runTraining = () => {
	fetchRawStrokeData()
		.then(({ shapeTrainingDataPoints, shapeCorrespondingOutputData }) => {
			const trainingDataTensor = tf.tensor2d(shapeTrainingDataPoints)
			const outputDataTensor = tf.tensor2d(shapeCorrespondingOutputData)
			const testingDataTensor = tf.tensor2d([testingDataCircle, testingDataSquare])

			const startTime = Date.now()
			model
				.fit(trainingDataTensor, outputDataTensor, { epochs: 300 })
				.then(history => {
					console.log(history)
					console.log(Date.now() - startTime)
					model.predict(testingDataTensor).print()
					// model.save('downloads://shape-recognition')
				})
		})
}

export default runTraining
